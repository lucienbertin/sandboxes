ssl_certificate     /etc/nginx/certs/sandboxes-selfsigned.crt;
ssl_certificate_key /etc/nginx/certs/sandboxes-selfsigned.key;
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
ssl_prefer_server_ciphers on;
ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
ssl_ecdh_curve secp384r1;
ssl_session_cache shared:SSL:10m;
ssl_session_tickets off;
ssl_stapling on;
ssl_stapling_verify on;
resolver 8.8.8.8 8.8.4.4 valid=300s;
resolver_timeout 5s;
# Disable preloading HSTS for now.  You can use the commented out header line that includes
# the "preload" directive if you understand the implications.
add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
# add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
add_header X-Frame-Options DENY;
add_header X-Content-Type-Options nosniff;
ssl_dhparam  /etc/nginx/certs/sandboxes-dhparam.pem;

include /etc/nginx/mime.types;
http2 on;

upstream rust {
    server rust:3000;
}
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name rust.sandboxes.local;

    location / {
        proxy_pass http://rust/;
    }
}

upstream nextjs {
    server nextjs:3000;
}
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name nextjs.sandboxes.local;

    location / {
        proxy_pass http://nextjs/;
        proxy_buffering off;
    }
}

upstream nestjs {
    server nestjs:3000;
}
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name nestjs.sandboxes.local;

    location / {
        proxy_pass http://nestjs/;
    }
}

upstream haskell {
    server haskell:3000;
}
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name haskell.sandboxes.local;

    location / {
        proxy_pass http://haskell/;
    }
}

upstream angular {
    server angular:3000;
}
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name angular.sandboxes.local;

    location / {
        proxy_pass http://angular/;
    }
}

upstream blazor {
    server blazor:8080;
}
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name blazor.sandboxes.local;

    location / {
        proxy_pass http://blazor/;
        proxy_buffering off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}


upstream elm {
    server elm:3000;
}
server {
    server_name elm.sandboxes.local;
    listen 443 ssl;
    listen [::]:443 ssl;

    location / {
        proxy_pass http://elm/;
    }
}

server {
    listen 80;
    server_name *.sandboxes.home;
    return 302 https://$server_name$request_uri;
}