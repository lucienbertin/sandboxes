version: '3.9'

services:
  postgres:
    image: postgis/postgis
    restart: always
    ports:
      - 5432:5432
    volumes:
      - /tank/lulu/volumes/sandbox-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    environment:
      POSTGRES_PASSWORD: postgres
    networks:
      - sandboxes

  rmq:
    image: rabbitmq:4-management
    restart: always
    ports:
    - 5672:5672
    - 15672:15672
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - /tank/lulu/volumes/sandbox-rmq/data/:/var/lib/rabbitmq/
      - /tank/lulu/volumes/sandbox-rmq/log/:/var/log/rabbitmq/
    networks:
      - sandboxes

  redis:
    image: redis:latest
    restart: always
    command: redis-server
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    ports:
    - 6379:6379
    networks:
      - sandboxes

  mongo:
    image: mongo:latest
    restart: always
    hostname: mongodb
    volumes:
      - /tank/lulu/volumes/sandbox-mongo/data/:/data/db/
      - /tank/lulu/volumes/sandbox-mongo/log/:/var/log/mongodb/
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: mongo-admin
    #   MONGO_INITDB_ROOT_PASSWORD: mongo-admin
    ports:
      - 27017:27017
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - sandboxes
  mongo-express:
    image: mongo-express:latest
    restart: always
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: mongo-admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: mongo-admin
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_BASICAUTH_USERNAME: mongouser
      ME_CONFIG_BASICAUTH_PASSWORD: mongouser
    ports:
      - 8081:8081
    depends_on:
      mongo: 
        condition: service_healthy
        restart: true
    networks:
      - sandboxes

  rust:
    image: sandboxes-rust
    build: ./rust
    env_file: ./rust/.env.dc
    ports:
      - 8001:8000
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      rmq:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
    networks:
      - sandboxes

  nextjs:
    image: sandboxes-nextjs
    build: ./nextjs
    env_file: ./nextjs/.env.dc
    ports:
      - 3001:3000
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    networks:
      - sandboxes

  nestjs:
    image: sandboxes-nestjs
    build: ./nestjs
    env_file: ./nestjs/.env.dc
    ports:
      - 3002:3000
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      mongo:
        condition: service_healthy
        restart: true
    networks:
      - sandboxes

  haskell:
    image: sandboxes-haskell
    build: ./haskell
    # env_file: ./haskell/.env.dc
    ports:
      - 3003:3000
    restart: always
    networks:
      - sandboxes

  angular:
    image: sandboxes-angular
    build: ./angular
    env_file: ./angular/.env.dc
    ports:
      - 3004:3000
    restart: always
    networks:
      - sandboxes


networks:
  sandboxes:
    driver: bridge
    name: sandboxes